variable "azure_files_authentication" {
  type = object({
    directory_type = string,
    active_directory = object({
      domain_guid         = string,
      domain_name         = string,
      domain_sid          = string,
      forest_name         = string,
      netbios_domain_name = string,
      storage_sid         = string
    })
  })
  default = null
}

data "azurerm_resource_group" "fileshare" {
  name = "rg-${var.environment_prefix}-${var.azure_resource_group_postfix}"
}

data "azurerm_virtual_network" "fileshare" {
  name                = "vnet-${var.environment_prefix}"
  resource_group_name = data.azurerm_resource_group.fileshare.name
}

module "vd_fileshare" {
  source              = "../../terraform-modules/azurerm/fileshare"
  location            = data.azurerm_resource_group.fileshare.location
  resource_group_name = data.azurerm_resource_group.fileshare.name
  # this name should not exceed 15 characters. If we join it to domain, samaccount name has limit of 15 characters
  storage_account_name     = var.azure_storage_shares_storage_account_name
  account_tier             = "Standard" # Premium
  account_replication_type = "LRS"
  account_kind             = "StorageV2" # FileStorage
  access_tier              = "Hot"
  min_tls_version          = "TLS1_2"
  # network_rules_default_action = "Deny"
  # network_rules_bypass         = ["AzureServices"]
  # network_rules_ip_rules       = []
  network_rules_virtual_network_subnet = [
    {
      subnet_name          = var.azure_virtual_network_subnet_names[0],
      virtual_network_name = data.azurerm_virtual_network.fileshare.name,
      resource_group_name  = data.azurerm_resource_group.fileshare.name
    }
  ]
  private_endpoint_name = "privep-${var.environment_prefix}-fs"


  storage_shares_principal_names = var.storage_shares_principal_names

  // storage_shares = [
  //   {
  //     name = "test1",
  //     quota = 512,
  //     rbacs = [
  //       { principal_name = "ppr-avd-dev-users", role = "Storage File Data SMB Share Reader" },
  //       { principal_name = "ppr-avd-users", role = "Storage File Data SMB Share Contributor" }
  //     ]
  //   },
  //   {
  //     name = "test2",
  //     quota = 512,
  //     rbacs = [
  //       { principal_name = "ppr-avd-dev-users", role = "Storage File Data SMB Share Reader" },
  //       { principal_name = "ppr-avd-users", role = "Storage File Data SMB Share Contributor" }
  //     ]
  //   }
  // ]

  storage_shares = var.storage_shares

  // azure_files_authentication = {
  //   directory_type = "AD",
  //   active_directory = {
  //     domain_guid = "",
  //     domain_name = "",
  //     domain_sid = "",
  //     forest_name = "",
  //     netbios_domain_name = "",
  //     storage_sid = ""
  //   }
  // }

  azure_files_authentication = var.azure_files_authentication

  tags = merge(
    {
      "environment" = var.environment_prefix
    },
    var.azure_tags
  )

}

resource "local_file" "ansible_vars" {
  content  = <<-DOC
    ---
    # Generated by terraform
    # Ansible vars_file containing variable for
    # offline domain join for the storage account
    azure_bootstrap_resource_group_name: '${var.azure_bootstrap_resource_group_name}'
    azure_bootstrap_storage_account_name: '${var.azure_bootstrap_storage_account_name}'
    azure_bootstrap_storage_account_container_name: '${var.azure_bootstrap_storage_account_container_name}'
    fileshare_storage_account_name: '${module.vd_fileshare.fileshare_storage_account_name}'
    fileshare_storage_account_resource_group_name: '${data.azurerm_resource_group.fileshare.name}'
    fileshare_storage_account_primary_file_host: '${module.vd_fileshare.fileshare_storage_account_primary_file_host}'
    fileshare_storage_account_primary_file_endpoint: '${module.vd_fileshare.fileshare_storage_account_primary_file_endpoint}'
    fileshare_storage_account_default_share_permisson: '${var.default_share_permission}'
    fileshare_storage_account_shares: ${jsonencode(module.vd_fileshare.fileshare_storage_share_names)}
    terraform_project_path: '../terraform/${basename(path.cwd)}'
    terraform_project_name: '${basename(path.cwd)}'
    terraform_tfstate_file_name: '${basename(path.cwd)}.tfstate'
    terraform_variables_files: ["../../global.tfvars"]
    DOC
  filename = "${replace(dirname(path.cwd), "terraform", "ansible")}/vars/${var.generated_for_ansible_file_prefix}${basename(path.cwd)}.yml"

  depends_on = [module.vd_fileshare]
}

output "fileshare_storage_account_id" {
  value = module.vd_fileshare.fileshare_storage_account_id
}
output "fileshare_storage_account_name" {
  value = module.vd_fileshare.fileshare_storage_account_name
}
output "fileshare_storage_account_primary_file_host" {
  value = module.vd_fileshare.fileshare_storage_account_primary_file_host
}
output "fileshare_storage_account_primary_file_endpoint" {
  value = module.vd_fileshare.fileshare_storage_account_primary_file_endpoint
}
output "fileshare_storage_account_primary_access_key" {
  value     = module.vd_fileshare.fileshare_storage_account_primary_access_key
  sensitive = true
}
output "fileshare_storage_share_ids" {
  value = module.vd_fileshare.fileshare_storage_share_ids
}
output "fileshare_storage_share_names" {
  value = module.vd_fileshare.fileshare_storage_share_names
}
output "fileshare_storage_private_endpoint_id" {
  value = module.vd_fileshare.fileshare_storage_private_endpoint_id
}
output "fileshare_storage_private_endpoint_name" {
  value = module.vd_fileshare.fileshare_storage_private_endpoint_name
}
output "fileshare_storage_private_endpoint_service_connection_private_ip_addresses" {
  value = module.vd_fileshare.fileshare_storage_private_endpoint_service_connection_private_ip_addresses
}
output "fileshare_storage_private_endpoint_service_connection_names" {
  value = module.vd_fileshare.fileshare_storage_private_endpoint_service_connection_names
}
