resource "azurerm_resource_group" "rg" {
  name     = "rg-${var.environment_prefix}-${var.azure_resource_group_postfix}"
  location = var.azure_location
  tags = merge(
    {
      "resourcename" = format("%s", lower(replace("rg-${var.environment_prefix}-${var.azure_resource_group_postfix}", "/[[:^alnum:]]/", ""))),
      "environment"  = var.environment_prefix,
    },
    var.azure_tags
  )
}

# Read private key from local file
data "local_file" "private_key_pem" {
  count = fileexists(var.ssh_private_key_file) ? 1 : 0
  # filename = pathexpand(var.ssh_private_key_file)
  filename = var.ssh_private_key_file
}

# Read public key from local file
data "local_file" "public_key_openssh" {
  count = fileexists("${var.ssh_private_key_file}.pub") ? 1 : 0
  #filename        = pathexpand("${var.ssh_private_key_file}.pub")
  filename = "${var.ssh_private_key_file}.pub"
}

# Generate public key from private key
data "tls_public_key" "key" {
  #private_key_pem = length(var.ssh_private_key_pem) > 0 ?  var.ssh_private_key_pem : file(pathexpand(var.ssh_private_key_file))
  private_key_pem = length(var.ssh_private_key_pem) > 0 ? var.ssh_private_key_pem : file(var.ssh_private_key_file)
}

# Write private key to disk
resource "local_file" "private_key_pem" {
  #sensitive_content = length(var.ssh_private_key_pem) > 0 ? var.ssh_private_key_pem : file(pathexpand(var.ssh_private_key_file))
  sensitive_content = length(var.ssh_private_key_pem) > 0 ? var.ssh_private_key_pem : file(var.ssh_private_key_file)
  #filename          = pathexpand(var.ssh_private_key_file)
  filename        = var.ssh_private_key_internal_terraform
  file_permission = "0600"
}

# Write public key to disk
resource "local_file" "public_key_openssh" {
  #content         = length(var.ssh_private_key_pem) > 0 ? data.tls_public_key.key.public_key_openssh : file(pathexpand("${var.ssh_private_key_file}.pub"))
  content = length(var.ssh_private_key_pem) > 0 ? data.tls_public_key.key.public_key_openssh : file("${var.ssh_private_key_file}.pub")
  #filename        = pathexpand("${var.ssh_private_key_file}.pub")
  filename        = "${var.ssh_private_key_internal_terraform}.pub"
  file_permission = "0644"

  depends_on = [data.tls_public_key.key]
}

resource "local_file" "ansible_vars" {
  content  = <<-DOC
    ---
    # Generated by terraform
    # Ansible vars_file containing variable for
    # global admin credentials and ad domain.
    vault_global_win_timezone: '${var.azure_vm_windows_timezone}'
    vault_global_win_user_language: '${var.azure_vm_windows_user_language}'
    vault_global_admin_user: "{{ lookup('env', 'TF_VAR_azure_vm_admin_username') }}"
    vault_global_admin_password: "{{ lookup('env', 'TF_VAR_azure_vm_admin_password') }}"
    vault_global_public_hosting_domain: "${var.public_hosting_domain}"
    vault_global_ad_domain_name: '${var.ad_domain_name}'
    vault_global_ad_domain_netbios_name: '${var.ad_domain_netbios_name}'
    vault_global_ad_domain_dn_name: '${var.ad_domain_dn_name}'
    vault_global_ssh_private_key: '${var.ssh_private_key_internal_ansible}'
    vault_global_ansible_ssh_common_args: '-i {{ vault_global_ssh_private_key }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyCommand="ssh -p 1122 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i {{ vault_global_ssh_private_key }} -W %h:%p -q {{ vault_global_admin_user }}@${var.reversproxy_dns_hostname}.${lookup(var.azure_location_to_dns, var.azure_location, "${var.azure_location}.cloudapp.azure.com")}"'
    vault_global_guac_mfa_enabled: "{{ lookup('env', 'GUAC_MFA_ENABLED') | default(false) | bool }}"
    vault_global_generated_for_ansible_file_prefix: '${var.generated_for_ansible_file_prefix}'
    # Variables for documentation generated by terraform
    vault_global_azure_location: '${var.azure_location}'
    vault_global_azure_virual_network_subnet_address_prefix: '${var.azure_virual_network_subnet_address_prefixes[0]}'
    vault_global_azure_location_dns: '${lookup(var.azure_location_to_dns, var.azure_location, "${var.azure_location}.cloudapp.azure.com")}'
    vault_global_reversproxy_dns_hostname: '${var.reversproxy_dns_hostname}'

    DOC
  filename = "${replace(dirname(path.cwd), "terraform", "ansible")}/inventory/group_vars/all/${var.generated_for_ansible_file_prefix}vault"

}

output "resource_group_id" {
  value = azurerm_resource_group.rg.id
}
