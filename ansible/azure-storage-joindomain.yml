---
- hosts: dc
  vars_files:
    - vars/generic.yml

  tasks:
    - include_vars: "{{ item }}"
      with_first_found:
        - 'vars/{{ vault_global_generated_for_ansible_file_prefix }}06_fileshare.yml'

    - name: Ensure kerb1 key in storage account, default share permission and create computer account
      win_shell: |
        Import-Module -Name AZ.Storage
        Import-Module -Name AZ.Accounts

        $TenantId = "{{ lookup('env', 'ARM_TENANT_ID') }}"
        $SubscriptionId = "{{ lookup('env', 'ARM_SUBSCRIPTION_ID') }}"
        $ResourceGroupName = "{{ fileshare_storage_account_resource_group_name }}"
        $StorageAccountName = "{{ fileshare_storage_account_name }}"
        $DefaultSharePermission = "{{ fileshare_storage_account_default_share_permisson }}"
        $arm_client_id = "{{ lookup('env', 'ARM_CLIENT_ID') }}"
        $arm_client_secret_plain = "{{ lookup('env', 'ARM_CLIENT_SECRET') }}"
        $arm_client_secret_secure = $arm_client_secret_plain | ConvertTo-SecureString -AsPlainText -Force

        $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $arm_client_id, $arm_client_secret_secure
        $az_profile = Connect-AzAccount -ServicePrincipal `
          -TenantId $TenantId `
          -Subscription $SubscriptionId `
          -Credential $Credential
        $select_subscription = Select-AzSubscription -SubscriptionId $SubscriptionId


        try {
            $storageAccount = Get-AzStorageAccount -ResourceGroupName $ResourceGroupName -Name $StorageAccountName -ErrorAction Stop
        }
        catch {
            Write-Error -Message "Caught exception: $_" -ErrorAction Stop
        }

        $keys = Get-AzStorageAccountKey -ResourceGroupName $ResourceGroupName -Name $StorageAccountName -ListKerbKey `
            | Where-Object { $_.KeyName -like "kerb*" }

        try {
            $kerb1Key = $keys | Where-Object { $_.KeyName -eq "kerb1" }
            $kerb2Key = $keys | Where-Object { $_.KeyName -eq "kerb2" }
        }
        catch {
            Write-Verbose "Caught exception: $($_.Exception.Message)"
        }

        if ($null -eq $kerb1Key) {
            #
            # The storage account doesn't have kerb keys yet.  Generate them now.
            #
            try {
                $keys = New-AzStorageAccountKey -ResourceGroupName $ResourceGroupName -Name $StorageAccountName -KeyName kerb1 -ErrorAction Stop
            }
            catch {
                Write-Error -Message "Caught exception: $_" -ErrorAction Stop
            }

            $kerb1Key = Get-AzStorageAccountKey -ResourceGroupName $ResourceGroupName -Name $StorageAccountName -ListKerbKey `
                        | where-object{$_.Keyname -contains "kerb1"}

            Write-Verbose "    Key: $($kerb1Key.KeyName) generated for StorageAccount: $StorageAccountName"
          } else {
            Write-Verbose "    Key: $($kerb1Key.KeyName) exists in Storage Account: $StorageAccountName"
          }

          if ($null -eq $kerb2Key) {
            #
            # The storage account doesn't have kerb keys yet.  Generate them now.
            #

            $keys = New-AzStorageAccountKey -ResourceGroupName $ResourceGroupName -Name $StorageAccountName -KeyName kerb2 -ErrorAction Stop

            $kerb2Key = Get-AzStorageAccountKey -ResourceGroupName $ResourceGroupName -Name $StorageAccountName -ListKerbKey `
                        | where-object{$_.Keyname -contains "kerb2"}

            Write-Verbose "    Key: $($kerb2Key.KeyName) generated for StorageAccount: $StorageAccountName"
            } else {
            Write-Verbose "    Key: $($kerb2Key.KeyName) exists in Storage Account: $StorageAccountName"
          }

        #
        # Check existing AD computer account/create new and set password
        #
        $computer_account = $null
        try {
          $computer_account = Get-ADComputer {{ fileshare_storage_account_name }}
          # Get-ADComputer {{ fileshare_storage_account_name }} | Remove-ADComputer -Confirm:$False
        }
        catch {}

        $fileServiceAccountPwdSecureString = ConvertTo-SecureString -String $kerb1Key.Value -AsPlainText -Force
        if ($null -eq $computer_account) {
          $computer_account = New-ADComputer `
            -SAMAccountName {{ fileshare_storage_account_name }} `
            -Path "CN=Computers,{{ domain_ou_base }}" `
            -Name {{ fileshare_storage_account_name }} `
            -AccountPassword $fileServiceAccountPwdSecureString `
            -AllowReversiblePasswordEncryption $false `
            -Description "Computer account object for Azure storage account {{ fileshare_storage_account_name }}." `
            -ServicePrincipalNames "cifs/{{ fileshare_storage_account_primary_file_host }}" `
            -KerberosEncryptionType "AES256" `
            -Enabled $true `
            -PassThru `
            -ErrorAction Stop
        } else {
          Set-ADAccountPassword `
              -Identity $computer_account `
              -Reset `
              -NewPassword $fileServiceAccountPwdSecureString `
              -ErrorAction Stop
        }

        Write-Host $computer_account.SID.Value
      register: fileshare1_output
      tags: fileshare1

    - debug:
        var: fileshare1_output
      #tags: [never, fileshare1]

    - name: Get all properties for the domain
      community.windows.win_domain_object_info:
        identity: '{{ domain_ou_base }}'
        properties: '*'
      register: win_domain_object_info
      tags: fileshare1

    - debug:
        var: win_domain_object_info
      tags: [never, fileshare1]

    - name: Set domain info into facts
      set_fact:
        join_info_domain_guid: "{{ win_domain_object_info.objects[0].ObjectGUID }}"
        join_info_domain_name: "{{ win_domain_object_info.objects[0].CanonicalName | regex_replace('\\/$', '') }}"
        join_info_domain_sid: "{{ win_domain_object_info.objects[0].objectSid.Sid }}"
        join_info_forest_name: "{{ win_domain_object_info.objects[0].CanonicalName | regex_replace('\\/$', '') }}"
        join_info_netbios_domain_name: "{{ win_domain_object_info.objects[0].CanonicalName | regex_replace('\\/$', '') }}"
        join_info_storage_sid: "{{ fileshare1_output.stdout_lines[0] }}"

    - name: Set domain into on storage account
      win_shell: |
        Import-Module -Name AZ.Storage
        Import-Module -Name AZ.Accounts

        $TenantId = "{{ lookup('env', 'ARM_TENANT_ID') }}"
        $SubscriptionId = "{{ lookup('env', 'ARM_SUBSCRIPTION_ID') }}"
        $ResourceGroupName = "{{ fileshare_storage_account_resource_group_name }}"
        $StorageAccountName = "{{ fileshare_storage_account_name }}"
        $DefaultSharePermission = "{{ fileshare_storage_account_default_share_permisson }}"
        $arm_client_id = "{{ lookup('env', 'ARM_CLIENT_ID') }}"
        $arm_client_secret_plain = "{{ lookup('env', 'ARM_CLIENT_SECRET') }}"
        $arm_client_secret_secure = $arm_client_secret_plain | ConvertTo-SecureString -AsPlainText -Force

        $join_info_domain_guid = "{{ join_info_domain_guid }}"
        $join_info_domain_name = "{{ join_info_domain_name }}"
        $join_info_domain_sid = "{{ join_info_domain_sid }}"
        $join_info_forest_name = "{{ join_info_forest_name }}"
        $join_info_netbios_domain_name = "{{ join_info_netbios_domain_name }}"
        $join_info_storage_sid = "{{ join_info_storage_sid }}"


        $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $arm_client_id, $arm_client_secret_secure
        $az_profile = Connect-AzAccount -ServicePrincipal `
          -TenantId $TenantId `
          -Subscription $SubscriptionId `
          -Credential $Credential
        $select_subscription = Select-AzSubscription -SubscriptionId $SubscriptionId

        Set-AzStorageAccount -ResourceGroupName $ResourceGroupName `
          -AccountName $StorageAccountName `
          -EnableActiveDirectoryDomainServicesForFile $true `
          -DefaultSharePermission $DefaultSharePermission `
          -ActiveDirectoryAzureStorageSid $join_info_storage_sid `
          -ActiveDirectoryDomainGuid $join_info_domain_guid `
          -ActiveDirectoryDomainName $join_info_domain_name `
          -ActiveDirectoryDomainSid $join_info_domain_sid `
          -ActiveDirectoryForestName $join_info_forest_name `
          -ActiveDirectoryNetBiosDomainName $join_info_netbios_domain_name
      register: set_domain_info_on_storage_account_result

    - debug:
        var: set_domain_info_on_storage_account_result
      tags: [never, debug]

    - name: Generate domainjoin.auto.tfvars into terraform directory
      local_action:
        module: template
        src: './templates/terraform_azstorage_domainjoin.tfvars.j2'
        dest: '{{ terraform_project_path }}/domainjoin.auto.tfvars'

    - name: Run terraform apply
      local_action:
        module: community.general.terraform
        project_path: '{{ terraform_project_path }}'
        state: "{{ state | default('present') }}"
        # force_init: true
        backend_config:
          resource_group_name: '{{ azure_bootstrap_resource_group_name }}'
          storage_account_name: '{{ azure_bootstrap_storage_account_name }}'
          container_name: '{{ azure_bootstrap_storage_account_container_name }}'
          key: '{{ terraform_tfstate_file_name }}'
        variables_files: '{{ terraform_variables_files }}'
      register: result
      when: fileshare1_output.rc == 0

    - debug:
        msg: '{{ result.stdout }}'
      when: fileshare1_output.rc == 0
      tags: [never, debug]

    - debug:
        var: result
      when: fileshare1_output.rc == 0
      tags: [never, debug]
